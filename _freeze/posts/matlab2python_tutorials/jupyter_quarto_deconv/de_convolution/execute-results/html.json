{
  "hash": "698c7fec28ef03dd9d2bc862df61c1f4",
  "result": {
    "markdown": "---\ntitle: 'Convolution and deconvolution: an Illustration'\nsubtitle: This Jupyter notebook in a Quarto slideshow is translated from a Matlab LiveScript. The code visualizes some of the elements of convolution and deconvolution\nformat:\n  revealjs:\n    slide-number: true\n    preview-links: auto\n    theme: serif\n    smaller: false\n    scrollable: true\neditor: visual\n---\n\n# Convolution\n\n## \n\n:::: {.columns}\n::: {.column  width=\"55%\"}\n-   Convolution: a simple mathematical function that quantifies similarity between a pattern (a \"kernel\") such as the red square wave below with data ( blue rectangularish thingy below).\n:::\n::: {.column  width=\"45%\"}\nThe convolution (black line) reflects how similar the blue signal is with the kernel at any given time point. Convolution is thus used in all of digital signal processing.\n\n:::\n::::\n\n![](Convolution_of_spiky_function_with_box2.gif)\n\n## \n\nThe math is simple. We take the kernel, move it to the first portion of the data by lining it up with the first sample point, then we multiply each element of the kernel with the data, sum the results into one new number and write that to that first sample point.\n\n\n\n## Convolution in signal generation and in fMRI research. {.smaller}\n\nif we want to generate a signal where a certain pattern (the kernel) occurs at certain times, we can use convolution to achieve that. Thus, programs liek SPM use convolution of stimulus timinng info with a lernel that resembles the typical BOLD (fMRI) response as the kernel to generate fake, ideal, fMRI activation for comparison/correlation with the real data:\n\n::: {.cell output-location='column-fragment' execution_count=2}\n``` {.python .cell-code}\nonsets = np.zeros(120)\nonsets[1:11:1] = 1\nplt.plot(onsets) #, title ('simulated stimulus onsets, every 11 scans')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-3-output-1.png){}\n:::\n:::\n\n\n## Make a Kernel {.smaller}\n\n-   Now we make a kernel.\\\n-   the inverted gamma function is nice because it looks like fMRI in V1\n-   let's make one that is 10 scans long\n\n::: {.cell output-location='column-fragment' execution_count=3}\n``` {.python .cell-code code-line-numbers=\"1\"}\ng_f = np.arange(0.1,5.1,0.5)\nkernel = [1./math.gamma(i) for i in g_f]\nplt.plot(kernel) #, title('an inverted gamma kernel, length 10')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-4-output-1.png){}\n:::\n:::\n\n\n## convolve\n\nNow we just convolve the onsets with the kernel and plot the result\n\n::: {.cell output-location='column-fragment' execution_count=4}\n``` {.python .cell-code code-line-numbers=\"1\"}\ng_f = np.arange(0.1,5,0.5)\nkernel = [1./math.gamma(i) for i in g_f]\nplt.plot(kernel) #, title('an inverted gamma kernel, length 10')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-5-output-1.png){}\n:::\n:::\n\n\n## longer onsets\n\nSo this basically puts each 10 second kernel at the location where the onset is. There were 11 seconds between onsets, so this is like copy paste, but how about when the kernel is longer than the interval between onsets?\n\n::: {.cell output-location='column-fragment' execution_count=5}\n``` {.python .cell-code code-line-numbers=\"1\"}\nconvolution  = np.convolve(onsets, kernel); \n\nplt.plot(convolution) #, title('onset vector convolved with canonical BOLD response')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-6-output-1.png){}\n:::\n:::\n\n\n## but\n\nSo this basically puts each 10 second kernel at the location where the onset is. There were 11 seconds between onsets, so this is like copy paste, but how about when the kernel is longer than the interval between onsets?\n\n::: {.cell output-location='column-fragment' execution_count=6}\n``` {.python .cell-code code-line-numbers=\"1\"}\ng_f=np.arange(0.1,5.1,0.25)\nkernel = [1./math.gamma(i) for i in g_f] # this Kernel is twice as long\nconvolution  = np.convolve(onsets, kernel); \n#figure\nplt.plot(convolution) #, title('Convolution with temporal summation')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-7-output-1.png){}\n:::\n:::\n\n\n## overlaps\n\nWhen the convolution encounters overlap, then temporal summation results, because convolution is a process of shifting the kernel, multiplying element-wise, and summation to one new value, rinse and repeat. Because of the shifting and summing up portion of the algorithm, if the Kernel spans multiple, similar events, it will show temporal summation.\n\n## even better...\n\nThis is more interesting with variable inter-onset times.\n\n::: {.cell output-location='column-fragment' execution_count=7}\n``` {.python .cell-code code-line-numbers=\"1\"}\nonsets = np.zeros((120,1))\n\nonsets[[3,14,22,36,46,50,66,86,91,106,115],] = 1; #simple case where a stimulus is on every 11 scans\nprint(onsets.shape)\nplt.plot(onsets) #, title ('simulated stimulus onsets, every 11 scans')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(120, 1)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-8-output-2.png){}\n:::\n:::\n\n\n## Now we convolve these onset times with the same kernel\n\n::: {.cell output-location='column-fragment' execution_count=8}\n``` {.python .cell-code code-line-numbers=\"1\"}\nconvolution  = np.convolve(onsets.squeeze(), kernel); \nplt.plot(convolution) #, title('Convolution of random ITIs')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-9-output-1.png){}\n:::\n:::\n\n\n## what happened?\n\nLonger intervals between onsets prompt complete reduction to baseline, temporal proximity prompts smeared, overlapping events. How about gamma-shaped responses to stimuli that are longer than one image?\n\n::: {.cell output-location='column-fragment' execution_count=9}\n``` {.python .cell-code code-line-numbers=\"2,3:5\"}\nonsets = np.zeros((120,1))\nset0=[3,14,22,36,46,50,66,86,91,106,115];\nset1=[i+1 for i in set0]\nset2=[i+2 for i in set0]\nset3=[i+3 for i in set0]\nonsets[set0,] = 1; #simple case where a stimulus is on every 11 scans\nonsets[set1,] = 1;\n\nonsets[set2,] = 1;#simple case where a stimulus is on every 11 scans\nonsets[set3,] = 1;\n##onsets[[3, 14, 22, 36, 46, 50, 66, 86, 91, 106, 115]+2,] = 1;\n#onsets[[3, 14, 22, 36, 46, 50, 66, 86, 91, 106, 115]+3,] = 1;\nplt.plot(onsets) #, title ('simulated stimulus onsets, every 11 scans')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-10-output-1.png){}\n:::\n:::\n\n\n## next\n\nNow we convolve these onset times with the same kernel\n\n::: {.cell output-location='column-fragment' execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1\"}\nconvolution  = np.convolve(onsets.squeeze(), kernel); \n\nplt.plot(convolution) #, title('Convolution with 4-TR-long events'), ylabel('note the scale')\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-11-output-1.png){}\n:::\n:::\n\n\n# Deconvolution\n\nAnd now something completely different\n\n## Deconvolution\n\ndeconvolution is the process where we wish to estimate the Kernel from known data and known event-times. This is a version of the so-called inverse problem , and we solve it with a regression. Let's start with the simulated we we have:\n\n::: {.cell output-location='column-fragment' execution_count=11}\n``` {.python .cell-code code-line-numbers=\"|4|7\"}\nconvolution = np.random.rand(200) # Replace with your own convolution array\nonsets = np.random.rand(120) # Replace with your own onsets array\n\nX = np.zeros((len(convolution[0:120]), 20))\ntemp = onsets.copy()\n\nfor i in range(20):\n    X[:, i] = temp\n    temp = np.concatenate(([0], temp[:-1]))\n\nplt.pcolor(X, cmap='gray')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-12-output-1.png){}\n:::\n:::\n\n\n##\n\n::: {.cell output-location='column-fragment' execution_count=12}\n``` {.python .cell-code code-line-numbers=\"|1|4,7\"}\nPX = np.linalg.pinv(X)\n\nplt.pcolor(PX, cmap='gray')\nplt.show()\n\nh = PX @ convolution[0:120].T\n```\n\n::: {.cell-output .cell-output-display}\n![](de_convolution_files/figure-revealjs/cell-13-output-1.png){}\n:::\n:::\n\n\n## \n\n::: {.cell output-location='column-fragment' execution_count=13}\n``` {.python .cell-code code-line-numbers=\"|1,12|13,14|16\"}\ndef hrf_est(convolution, onsets, n):\n    X = np.zeros((len(convolution[0:120]), n))\n    temp = onsets.copy()\n\n    for i in range(n):\n        X[:,i] = temp\n        temp = np.concatenate(([0], temp[:-1]))\n\n    PX = np.linalg.pinv(X)\n    h = PX @ convolution[0:120].T\n    return h\n\n\n\nconvolution = np.random.rand(200) # Replace with your own convolution array\nonsets = [3, 14, 22, 36, 46, 50, 66, 86, 91, 106, 115]\n\n#h = hrf_est(convolution[0:120], onsets, 20)\n#plt.plot(h)\n#plt.show()\n\nconvolution\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\narray([0.31227047, 0.36725147, 0.04546227, 0.29136701, 0.75669452,\n       0.83290832, 0.35230937, 0.54105786, 0.16585391, 0.66803938,\n       0.59425868, 0.63948631, 0.79238452, 0.14647065, 0.18061537,\n       0.31456455, 0.26432539, 0.56629418, 0.71908877, 0.94441091,\n       0.01066684, 0.74441634, 0.53329193, 0.58100922, 0.28378334,\n       0.43038581, 0.59274404, 0.89326843, 0.37613119, 0.77526318,\n       0.40095181, 0.42837237, 0.76914332, 0.31723337, 0.69719955,\n       0.27794189, 0.64231581, 0.92578632, 0.16053705, 0.12940832,\n       0.28438306, 0.30516971, 0.91527627, 0.58075876, 0.0946737 ,\n       0.34849297, 0.85348843, 0.71620109, 0.52943011, 0.22438643,\n       0.0729463 , 0.12282209, 0.82416547, 0.46070593, 0.78433174,\n       0.87452207, 0.97068198, 0.78792151, 0.00261335, 0.76697835,\n       0.0610818 , 0.29385921, 0.80273433, 0.54506379, 0.86265396,\n       0.75454474, 0.7331248 , 0.85248399, 0.17823089, 0.00697547,\n       0.87332971, 0.5595396 , 0.92084491, 0.65820944, 0.91621235,\n       0.28900258, 0.95538776, 0.7446877 , 0.83351571, 0.16638416,\n       0.94230616, 0.9936886 , 0.15789909, 0.94715418, 0.9304468 ,\n       0.01501098, 0.88778955, 0.16947719, 0.92895629, 0.06036035,\n       0.87098292, 0.02179634, 0.3370194 , 0.80931652, 0.93097995,\n       0.05554652, 0.88663127, 0.18159799, 0.43124087, 0.74516713,\n       0.38935134, 0.11838899, 0.59816772, 0.9983227 , 0.80549776,\n       0.3755286 , 0.90510259, 0.40587136, 0.7610456 , 0.88086105,\n       0.95817381, 0.52652362, 0.20499371, 0.7930317 , 0.22612199,\n       0.69113388, 0.97722706, 0.28460429, 0.52635987, 0.48620151,\n       0.59534548, 0.51849022, 0.93661541, 0.96345042, 0.36246253,\n       0.0065225 , 0.84959676, 0.1935243 , 0.58025956, 0.76602593,\n       0.37712614, 0.84527618, 0.75608741, 0.41394046, 0.65671363,\n       0.21284784, 0.97746669, 0.80359468, 0.92178055, 0.55294849,\n       0.34398651, 0.19998217, 0.21155965, 0.1996093 , 0.9357094 ,\n       0.56122344, 0.53022708, 0.56951252, 0.10565044, 0.21872289,\n       0.97359389, 0.61288618, 0.92660408, 0.15725184, 0.38883257,\n       0.54473583, 0.03468674, 0.04499831, 0.6849714 , 0.06874274,\n       0.32244816, 0.80765523, 0.09835448, 0.04515715, 0.47092856,\n       0.45609111, 0.94598719, 0.83792575, 0.78585328, 0.25604461,\n       0.59705495, 0.03000192, 0.95400304, 0.19407581, 0.8169776 ,\n       0.77641489, 0.40372059, 0.81589827, 0.56117137, 0.56969666,\n       0.23596599, 0.30276232, 0.19068385, 0.63456702, 0.93952322,\n       0.43166334, 0.2327397 , 0.08006256, 0.07014018, 0.03861886,\n       0.17699282, 0.50955889, 0.61827258, 0.86253192, 0.54388359,\n       0.20989386, 0.76734762, 0.61337884, 0.43611847, 0.19454191])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "de_convolution_files"
    ],
    "filters": [],
    "includes": {}
  }
}