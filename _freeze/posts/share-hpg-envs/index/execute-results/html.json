{
  "hash": "4858355c2cad9705d720954e0fdcc5c0",
  "result": {
    "markdown": "---\ntitle: \"Sharing Customized Python Environments\"\nauthor: \"RPM\"\ndate: \"2022-12-30\"\n---\n\n---\ntitle: \"Using Custom Python environments for Jupyter Notebooks in HiPerGator\"\nformat: \n  html:\n    anchor-sections: true\n    number-sections: true\n    number-depth: 4\n    toc: true\n    toc-depth: 4\n    code-copy: true\n    code-fold: show\n    \neditor: \n  markdown: \n    wrap: 72\n---\n\n## Custom Python Environments for Jupyter Notebooks\n\nTo simply use the environment go to [The .condarc configuration\nfile](http://localhost:7816/posts/share-hpg-envs/#the-.condarc-configuration-file)\nthen to [Copy the template_kernel folder to your\npath](http://localhost:7816/posts/share-hpg-envs/#copy-the-template_kernel-folder-to-your-path)\n\nFor additional info about using Python virtual environments with Conda\nplease go the the UFRC page or the Software Carpentries pages from which\nthese procedures were derived.\n\n-   [UFRC: Customizing a Shared Python\n    Environment](https://help.rc.ufl.edu/doc/Managing_Python_environments_and_Jupyter_kernels)\n-   [Carpentries: Ch.2 Conda\n    Environments](https://carpentries-incubator.github.io/introduction-to-conda-for-data-scientists/02-working-with-environments/index.html)\n-   [Conda: Using the .condarc Configuration\n    file](https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#)\n\n## Background (from UFRC page)\n\nMany projects that use `Python` code require careful management of the\nrespective Python environments. Rapid changes in package dependencies,\npackage version conflicts, deprecation of APIs (function calls) by\nindividual projects, and obsolescence of system drivers and libraries\nmake it virtually impossible to use an arbitrary set of packages or\ncreate one all-encompassing environment that will serve everyone's needs\nover long periods of time. The high velocity of changes in the popular\nML/DL frameworks and packages and GPU computing exacerbates the problem.\n\n## Getting Started: Conda Configuration\n\n### The <code>\\~/.condarc</code> configuration file\n\n<code>conda</code>'s behavior is controlled by a configuration file in\nyour home directory called <code>.condarc</code>. The dot at the start\nof the name means that the file is hidden from 'ls' file listing command\nby default. If you have not run <code>conda</code> before, you won't\nhave this file. Whether the file exists or not, the steps here will help\nyou modify the file to work best on HiPerGator. First load of the\n<code>conda</code> environment module on HiPerGator will put the current\n''best practice'' <code>.condarc</code> into your home directory.\n\nThis path will be found in your home directory (symbolic link\n\n```{bash}\n~\n```\n\n).\n\n``` {.Bash .bash}\nHome/myname/.condarc\n```\n\n### <code>conda</code> package cache location\n\n<code>conda</code> caches (keeps a copy) of all downloaded packages by\ndefault in the <code>\\~/.conda/pkgs</code> directory tree. If you\ninstall a lot of packages you may end up filling up your home quota. You\ncan change the default package cache path. To do so, add or change the\n<code>pkgs_dirs</code> setting in your <code>\\~/.condarc</code>\nconfiguration file e.g.:\n\n::: columns\n::: {.column width=\"45%\"}\n``` yaml\npkgs_dirs:\n  - /blue/akeil/share/conda/pkgs\n```\n:::\n\n::: {.column width=\"5%\"}\n...\n\nor\n:::\n\n::: {.column width=\"45%\"}\n``` yaml\n  - /blue/akeil/$USER/conda/pkgs\n```\n:::\n:::\n\nReplace <code>akeil</code> or <code>mygroup</code> with your actual\ngroup name.\n\n### <code>conda</code> environment location\n\n<code>conda</code> puts all packages installed in a particular\nenvironment into a single directory. By default ''named''\n<code>conda</code> environments are created in the\n<code>\\~/.conda/envs</code> directory tree. They can quickly grow in\nsize and, especially if you have many environments, fill the 40GB home\ndirectory quota. For example, the environment we will create in this\ntraining is 5.3GB in size. As such, it is important to use ''path''\nbased (conda create -p PATH) conda environments, which allow you to use\nany path for a particular environment for example allowing you to keep a\nproject-specific conda environment close to the project data in\n</code>/blue/</code> where you group has terrabyte(s) of space.\n\nYou can also change the default path for the ''name'' environments\n(<code>conda create -n NAME</code>) if you prefer to keep all\n<code>conda</code> environments in the same directory tree. To do so,\nadd or change the <code>envs_dirs</code> setting in the\n<code>\\~/.condarc</code> configuration file e.g.:\n\n::: columns\n::: {.column width=\"45%\"}\n``` yaml\nenvs_dirs:\n  - /blue/akeil/share/conda/envs\n```\n:::\n\n::: {.column width=\"5%\"}\n...\n\nor\n:::\n\n::: {.column width=\"45%\"}\n``` yaml\n- /blue/akeil/$USER/conda/envs\n```\n:::\n:::\n\nReplace <code>mygroup</code> with your actual group name.\n\n::: {.mw-collapsible style=\"width:90%; padding: 5px; border: 1px solid gray;\"}\n### Editing your <code>\\~/.condarc</code> file.\n\nOne way to edit your <code>\\~/.condarc</code> file is to type:\n\n``` {.Bash .bash}\nnano ~/.condarc\n```\n\nIf the file is empty, paste in the text below, editing the\n<code>env_dirs:</code> and <code>pkg_dirs:</code> as below. If the file\nhas contents, update those lines.\n\n::: callout-note\nYour <code>\\~/.condarc</code> should look something like this when you\nare done editing (again, replacing <code>group-akeil</code> and\n<code>USER</code> in the paths with your actual group and username).\\\n:::\n\n``` {.YAML .yaml}\nchannels: \n  - conda-forge \n  - bioconda \n  - defaults \nenvs_dirs: \n  - /blue/akeil/USER/conda/envs \npkgs_dirs: \n  - /blue/akeil/USER/conda/pkgs \nauto_activate_base: false \nauto_update_conda: false \nalways_yes: false \nshow_channel_urls: false\n```\n:::\n\n<div class=\"mw-collapsible-content\" style=\"padding: 5px;\">\n\n## Use your kernel from command line or scripts\n\nNow that we have our environment ready, we can use it from the command\nline or a script using something like:\n\n::: columns\n::: {.column width=\"35%\"}\n``` bash\nmodule load conda\nconda activate mne\n\n# Run my python script\npython amazing_script.py\n```\n:::\n\n::: {.column width=\"10%\"}\n...\\\nor\\\na path based setting:\n:::\n\n::: {.column width=\"55%\"}\n``` bash\n# Set path to environment \n#   pre-pend to PATH variable\nenv_path=/blue/akeil/share/mne_1_x/conda/bin\nexport PATH=$env_path:$PATH\n \n# Run my python script\npython amazing_script.py\n```\n:::\n:::\n\n## Setup a Jupyter Kernel for our environment\n\nOften, we want to use the environment in a Jupyter notebook. To do that,\nwe can create our own Jupyter Kernel.\n\n### Add the <code>jupyterlab</code> package\n\nIn order to use an environment in Jupyter, we need to make sure we\ninstall the <code>jupyterlab</code> package in the environment:\n\n<code>mamba install jupyterlab</code>\n\n### Copy the <code>template_kernel</code> folder to your path\n\nOn HiPerGator, Jupyter looks in two places for kernels when you launch a\nnotebook:\n\n-   <code>/apps/jupyterhub/kernels/</code> for the globally available\n    kernels that all users can use. (Also a good place to look for\n    troubleshooting getting your own kernel going)\n\n-   <code>\\~/.local/share/jupyter/kernels</code> for each user. (Again,\n    your home directory and the <code>.local</code> folder is hidden\n    since it starts with a dot)\n\nMake the <code>\\~/.local/share/jupyter/kernels</code> directory:\n<code>mkdir -p \\~/.local/share/jupyter/kernels</code>\n\nCopy the <code>/apps/jupyterhub/template_kernel</code> folder into your\n<code>\\~/.local/share/jupyter/kernels</code> directory:\n\n<code>cp -r /apps/jupyterhub/template_kernel/\n\\~/.local/share/jupyter/kernels/hfrl</code>\n\n::: callout-note\nThis also renames the folder in the copy. It is important that the\ndirectory names be distinct in both your directory and the global\n<code>/apps/jupyterhub/kernels/</code> directory.\n:::\n\n### Edit the <code>template_kernel</code> files\n\nThe <code>template_kernel</code> directory has four files: the\n<code>run.sh</code> and <code>kernel.json</code> files will need to be\nedited in a text editor. We will use <code>nano</code> in this tutorial.\nThe <code>logo-64X64.png</code> and <code>logo-32X32.png</code> are\nicons for your kernel to help visually distinguish it from others. You\ncan upload icons of those dimensions to replace the files, but they need\nto be named with those names.\n\n#### Edit the <code>kernel.json</code> file\n\nLet's start editing the <code>kernel.json</code> file. As an example, we\ncan use:\n\n<code>nano \\~/.local/share/jupyter/kernels/hfrl/kernel.json</code>\n\nThe template has most of the information and notes on what needs to be\nupdated. Edit the file to look like:\n\n``` {.json .json}\n{\n \"language\": \"python\",\n \"display_name\": \"MNE v1.x\",\n \"argv\": [\n  \"~/.local/share/jupyter/kernels/mne_1_x/run.sh\",\n  \"-f\",\n  \"{connection_file}\"\n ]\n}\n```\n\n#### Edit the <code>run.sh</code> file\n\nThe <code>run.sh</code> file needs the path to the <code>python</code>\napplication that is in our environment. The easiest way to get that is\nto make sure the environment is activated and run the command:\n<code>which python</code>\n\nThe path it outputs should look something like:\n<code>/blue/group/share/conda/envs/mne_1\\_x/bin/python</code>\n\nCopy that path.\n\nEdit the <code>run.sh</code> file with <code>nano</code>:\n\n<code>nano \\~/.local/share/jupyter/kernels/mne_1\\_x/run.sh</code>\n\nThe file should looks like this, *but with your path*:\n\n``` bash\n#!/usr/bin/bash\n\nexec /blue/akeil/share/conda/envs/mne_1_x/bin/python -m ipykernel \"$@\"\n```\n\nIf you are doing this in a Jupyter session, refresh your page. If not,\nlaunch Jupyter.\n\nYour kernel should be there ready for you to use!\n\n## Working with yml files\n\n### Export your environment to an <code>environment.yml</code> file\n\nNow that you have your environment working, you may want to document its\ncontents and/or share it with others. The <code>environment.yml</code>\nfile defines the environment and can be used to build a new environment\nwith the same setup.\n\nTo export an environment file from an existing environment, run:\n\n<code>conda env export \\> mne_1\\_x.yml</code>\n\nYou can inspect the contents of this file with <code>cat\nmne_1\\_x.yml</code>. This file defines the packages and versions that\nmake up the environment as it is at this point in time. Note that it\nalso includes packages that were installed via <code>pip</code>.\n\n### Create an environment from a yaml file\n\nIf you share the environment yaml file created above with another user,\nthey can create a copy of your environment using the command:\n\n<code>conda env create --file mne_1\\_x.yml</code>\n\nThey may need to edit the last line to change the location to match\nwhere they want their environment created.\n\n## Group environments\n\nIt is possible to create a shared environment accessed by a group on\nHiPerGator, storing the environment in, for example,\n<code>/blue/akeil/share/conda</code>. In general, this works best if\nonly one user has write access to the environment. All installs should\nbe made by that one user and should be communicated with the other users\nin the group.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}